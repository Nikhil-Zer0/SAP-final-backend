"""
report_generator.py
Generates professional, regulation-specific compliance reports
Clearly states compliance status for GDPR, EU AI Act, EEOC
Alternative to SAP Analytics Cloud reporting
"""

import logging
from datetime import datetime
from typing import Dict, List
from fpdf import FPDF

logger = logging.getLogger(__name__)

class ComplianceReportGenerator:
    """
    Service to generate audit-ready PDF reports with regulation-specific compliance status.
    
    This implements the 'Compliance Automation' component from your SAP Hackfest proposal:
    - GDPR/EU AI Act/EEOC aligned reports
    - Audit-ready, traceable documents
    - 1-click audit pack for GDPR, EEOC
    
    Clearly states whether the model is COMPLIANT or NON-COMPLIANT for each regulation.
    """
    
    @staticmethod
    def generate_pdf_report(
        model_name: str,
        model_version: str,
        bias_metrics: Dict[str, float],
        shap_explanation: str,
        recommendations: List[str],
        output_path: str = "compliance_report.pdf"
    ):
        """
        Generate a professional PDF compliance report with clear compliance status.
        """
        try:
            # Calculate compliance status
            di = bias_metrics.get("disparate_impact", 0)
            spd = abs(bias_metrics.get("statistical_parity_difference", 0))
            eod = abs(bias_metrics.get("equal_opportunity_difference", 0))

            # Regulation compliance logic
            compliance_status = {
                "EEOC": {
                    "status": "COMPLIANT" if di >= 0.8 else "NON-COMPLIANT",
                    "rule": "80% Rule (Disparate Impact < 0.8)",
                    "metric": f"Disparate Impact Ratio: {di:.3f}"
                },
                "GDPR": {
                    "status": "COMPLIANT" if shap_explanation and "explanation" in shap_explanation.lower() else "NON-COMPLIANT",
                    "rule": "Article 22 - Right to Explanation",
                    "metric": "Explainability Summary Provided + Fairness (DI >= 0.8)"
                },
                "EU AI Act": {
                    "status": "COMPLIANT" if (di >= 0.8 and spd <= 0.1) else "NON-COMPLIANT",
                    "rule": "High-Risk AI - Bias Thresholds",
                    "metric": f"DI: {di:.3f}, SPD: {spd:.3f}"
                }
            }

            # Build report data
            report_data = {
                "title": "Ethical AI Auditor",
                "subtitle": "Compliance & Audit Report",
                "model_info": {
                    "Model": model_name,
                    "Version": model_version,
                    "Generated On": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "Record Count": len(recommendations)  # Placeholder
                },
                "sections": [
                    {
                        "title": "1. Bias Detection Results (FairML Metrics)",
                        "items": [
                            f"Disparate Impact Ratio: {di:.3f} ({compliance_status['EEOC']['status']})",
                            f"Statistical Parity Difference: {bias_metrics.get('statistical_parity_difference', 0):.3f}",
                            f"Equal Opportunity Difference: {bias_metrics.get('equal_opportunity_difference', 0):.3f}"
                        ]
                    },
                    {
                        "title": "2. Explainability Summary (SAP Joule Alternative)",
                        "items": shap_explanation.strip().split('\n') if shap_explanation else ["No explanation available."]
                    },
                    {
                        "title": "3. Regulatory Compliance Status",
                        "items": [
                            f"EEOC: {compliance_status['EEOC']['status']} | {compliance_status['EEOC']['rule']} | {compliance_status['EEOC']['metric']}",
                            f"GDPR: {compliance_status['GDPR']['status']} | {compliance_status['GDPR']['rule']} | {compliance_status['GDPR']['metric']}",
                            f"EU AI Act: {compliance_status['EU AI Act']['status']} | {compliance_status['EU AI Act']['rule']} | {compliance_status['EU AI Act']['metric']}"
                        ]
                    },
                    {
                        "title": "4. Recommended Actions",
                        "items": recommendations
                    }
                ],
                "footer": "Generated by Ethical AI Auditor | SAP Hackfest 2025 | Team: CodeHers"
            }

            # Generate PDF
            pdf = FPDF()
            pdf.add_page()
            pdf.set_auto_page_break(auto=True, margin=20)
            pdf.set_left_margin(20)
            pdf.set_right_margin(20)

            # Title
            pdf.set_font("Helvetica", "B", 18)
            pdf.set_text_color(0, 90, 180)  # SAP Blue
            pdf.cell(0, 15, "", ln=True)  # Top margin
            pdf.cell(0, 10, report_data["title"], align="C", ln=True)
            pdf.set_font("Helvetica", "", 12)
            pdf.set_text_color(0, 0, 0)
            pdf.cell(0, 8, report_data["subtitle"], align="C", ln=True)
            pdf.ln(10)

            # Horizontal Line
            pdf.set_draw_color(200, 200, 200)
            pdf.line(20, pdf.get_y(), 190, pdf.get_y())
            pdf.ln(10)

            # Model Info
            pdf.set_font("Helvetica", "B", 12)
            pdf.cell(0, 8, "Model Information")
            pdf.ln(6)
            pdf.set_font("Helvetica", "", 10)
            for key, value in report_data["model_info"].items():
                pdf.cell(0, 6, f"{key}: {value}")
                pdf.ln(6)
            pdf.ln(8)

            # Sections
            for section in report_data["sections"]:
                # Section Title
                pdf.set_font("Helvetica", "B", 12)
                pdf.set_text_color(0, 0, 0)
                pdf.cell(0, 8, section["title"])
                pdf.ln(6)

                # Section Items
                pdf.set_font("Helvetica", "", 10)
                for item in section["items"]:
                    if not item.strip():
                        continue
                    clean_item = item.encode('ascii', 'replace').decode('ascii')
                    lines = pdf.multi_cell(170, 6, clean_item, align="L", split_only=True)
                    for line in lines:
                        pdf.cell(0, 6, line)
                        pdf.ln(6)
                    pdf.ln(2)
                pdf.ln(8)

            # Footer
            pdf.set_y(-30)
            pdf.set_font("Helvetica", "I", 8)
            pdf.set_text_color(128, 128, 128)
            pdf.cell(0, 10, report_data["footer"], align="C")

            # Output PDF
            pdf.output(output_path)
            return output_path

        except Exception as e:
            logger.error(f"Report generation failed: {str(e)}")
            raise